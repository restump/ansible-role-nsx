#!/usr/bin/env python

# Copyright (c) 2015 Reuben Stump
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

# TODO: Add last_rule parameter.  When "flush" removes all rules after this rule in chain,
# when "disable" disables all rules in chain after this rule
# TODO: Add a "flush" option to state parameter, which will flush all rules from chain.

DOCUMENTATION = '''
---
module: nsx_secpolicy_fwrule
author: Reuben Stump (stumpr@vmware.com)
version_added: "1.9"
requirements: [ xmltodict ]
short_description: 
  - Manage VMware NSX Security Policy firewall rules
description: 
  - Manage VMware NSX Security Policy firewall rules
options:
  vsm_hostname:
    description:
      - VMware NSX Manager hostname
    required: true
  vsm_username:
    description:
      - VMware NSX Manager username
    required: true
  vsm_password:
    description:
      - VMware NSX Manager password
    required: true
  secpolicy:
    description:
      - Name of security policy object
    required: true
  order:
    description:
      - Rank (order) number of this security policy action in the rule chain. A negative 
        number, or an order value greater than the current chain length, will append the 
        rule.
    required: true
  name:
    description:
      - Name of security policy action (rule)
    required: false
    default: null
  comment:
    description:
      - Description (comment) for the security policy action
    required: false
    default: null
  enabled:
    description:
      - Enable or disable this security policy action (rule)
    required: false
    choices: ["yes", "no"]
    default: "yes"
  action:
    description:
      - Action applied to this security policy action (rule)
    required: true
    choices: ["allow", "block", "reject"]
  direction:
    description:
      - Direction applied to the security policy action (rule).
    required: true
    choices: ["inbound", "outbound", "intra"]
  logged:
    description:
      - Enable or disable security policy logging for this action (rule)
    required: false
    choices: ["yes", "no"]
    default: "no"
  groups:
    description: 
      - List of secondary security group names that apply for this security policy rule. 
        If not specified, rule will apply to "any".  Source or destination is determined
        by "direction".
    required: false
    default: null
  services:
    description:
      - List of service (application) names that apply for this security policy rule.  
        If not specified, rule will apply to "any".
    required: false
    default: null
  service_groups:
    description:
      - List of service group (application group) names that apply for this security 
        policy rule. If not specified, rule will apply to "any".
    required: false
    default: null
  state:
    description:
      - State of security policy rule. "absent" will effectively delete the rule at the
        specified order (rank) position.
    choices: ["absent", "present"]
    default: "present"
  scopeid:
    description:
      - Scope of security policy
    required: false
    default: globalroot-0
'''

import json, httplib, ssl, base64, xmltodict, re

class NsxServiceStub(object):
    """ REST stub to the VMware NSX Manager API """
    
    def __init__(self, module, hostname='localhost', username='admin', password='default',
        scopeid='globalroot-0'):
        token = base64.standard_b64encode("%s:%s" % (username, password))
        self.headers = {
            "Content-Type": "application/xml",
            "Accept": "application/xml",
            "Authorization": "Basic %s" % token,
        }
        self.hostname = hostname
        self.module   = module
        self.scopeid  = scopeid
        
        self.schema   = {
            'SecurityGroup': { 
                'url': '/api/2.0/services/securitygroup',
                'tag': 'securitygroup',
            },
            'Application': { 
                'url': '/api/2.0/services/application',
                'tag': 'application',
            },
            'ApplicationGroup': { 
                'url': '/api/2.0/services/applicationgroup',
                'tag': 'applicationGroup',
            },
            'IPSet': { 
                'url': '/api/2.0/services/ipset',
                'tag': 'ipset',
            },
            'MACSet': { 
                'url': '/api/2.0/services/macset',
                'tag': 'macset',
            },
            'Policy': {
                'url': '/api/2.0/services/policy/securitypolicy',
                'tag': 'securityPolicy',
            },
            'SecurityTag': {
                'url': '/api/2.0/services/securitytags/tag',
                'tag': 'securityTag',
            },
            'IpAddressPool': {
                'url': '/api/2.0/services/ipam/pools',
                'tag': 'ipamAddressPool',
            },
            'Edge': {
                'url': '/api/4.0/edges',
                'tag': 'edge',
            },
        }
            
        try:
            conn = httplib.HTTPSConnection(hostname)
        except Exception, e:
            module.fail_json(msg=str(e))
        self.connection = conn
        return
    
    def __del__(self):
        self.connection.close()
    
    def _invoke(self, verb, path, data):
        try:
            self.connection.request(verb, path, data, self.headers)
            response = self.connection.getresponse()
        except Exception, e:
            self.module.fail_json(msg=str(e))

        content  = response.read()
        status   = response.status
        location = response.getheader('Location', None)
        if not 200 <= response.status < 300:
            self.module.fail_json(msg="http error (%s): %s" % (status, content))
        return (content, location)
        
    def getloc(self, location):
        (content, location) = self._invoke('GET', location, None)
        doc = xmltodict.parse(content)
        return doc.values()[0] # Hack to get around unknown XML root node

    def getall(self, type):
        base_url = self.schema[type]['url']
        tag = self.schema[type]['tag']
        
        if type == 'Policy':
            request_url = "%s/all" % (base_url)
        elif type == 'SecurityTag':
            request_url = base_url
        else:
            request_url = "%s/scope/%s" % (base_url, self.scopeid)
        (content, location) = self._invoke('GET', request_url, None)
        
        doc = xmltodict.parse(content)
        if type == 'Policy':
            objects = doc['securityPolicies'][tag]
        elif type == 'SecurityTag':
            objects = doc['securityTags'][tag]
        elif type == 'IpAddressPool':
            objects = doc['ipamAddressPools'][tag]
        else:
            objects = doc['list'][tag]
        
        if not isinstance(objects, list):
            objects = [ objects ]
        return objects   

    def lookup(self, type, key, val):
        tag = self.schema[type]['tag']        
        objects = self.getall(type)
        
        found = None
        for object in objects:
            if object[key] == val:
                found = object
        return found
        
    def create(self, type, properties):
        base_url = self.schema[type]['url']
        if type == 'SecurityGroup':
            request_url = "%s/bulk/%s" % (base_url, self.scopeid)
        elif type == 'Policy':
            request_url = base_url
        elif type == 'SecurityTag':
            request_url = base_url
        elif type == 'IpAddressPool':
            request_url = "%s/scope/%s" % (base_url, self.scopeid)
        else:
            request_url = "%s/%s" % (base_url, self.scopeid)
        tag = self.schema[type]['tag']
        
        doc = { tag: { } }
        for k,v in properties.iteritems():
            doc[tag][k] = v
        (content, location) = self._invoke('POST', request_url, xmltodict.unparse(doc))
        # Bug in the NSX API, for SecurityTag objects, returns incorrect location.
        if type == 'SecurityTag':
            id = re.search('.*/(.{1,})$', location).group(1)
            location = "%s/%s" % (request_url, id)
        return self.getloc(location)

    def delete(self, object, force=False):
        id = object['objectId']
        type = object['objectTypeName']
        
        base_url = self.schema[type]['url']
        request_url = "%s/%s?force=%s" % (base_url, id, str(force).lower())
        (content, location) = self._invoke('DELETE', request_url, None)
        return
    
    def update(self, object, properties):
        id = object['objectId']
        type = object['objectTypeName']
        
        tag = self.schema[type]['tag']
        base_url = self.schema[type]['url']
        if type == 'SecurityGroup':
            request_url = "%s/bulk/%s" % (base_url, id)
        else:
            request_url = "%s/%s" % (base_url, id)
            
        for k,v in properties.iteritems():
            object[k] = v
            
        doc = { tag: object }
        (content, location) = self._invoke('PUT', request_url, xmltodict.unparse(doc))
        return
               
def lookup_object_ids(stub, type, names):
    ids = [ ]
    
    objects = stub.getall(type)
    objects_by_name = { }
    for obj in objects:
        name = obj['name']
        objects_by_name[name] = obj
    
    if names == None:
        names = [ ]
    for name in names:
        object = objects_by_name.get(name, None)
        if object == None:
            stub.module.fail_json(msg="failed to find object '%s', '%s'" % (type, name))
        object_id = object['objectId']
        ids.append(object_id)
    return ids
    
def compare_fw_rule(stub, policy, order, properties, idlists):    
    actions = [ ]
    actionCategories = policy.get('actionsByCategory', [ ])
    if not isinstance(actionCategories, list):
        actionCategories = [ actionCategories ]
    for actionCategory in actionCategories:
        if actionCategory['category'] == 'firewall':
            actions = actionCategory.get('action', [ ])
            if not isinstance(actions, list):
                actions = [ actions ]
    
    if order < 0 or order > len(actions):
        return True
    action = actions[order - 1]
    
    for k,v in properties.iteritems():
        if isinstance(v, bool):
            val = str(v).lower()
        else:
            val = v
        if action.get(k, None) != val:
            return True
    
    # Iterate securitygroups, applications and applicationgroups
    objects = action.get('secondarySecurityGroup', [ ])
    if not isinstance(objects, list):
        objects = [ objects ]
    id_list = idlists.get('securitygroups', [ ])
    
    if len(id_list) != len(objects):
        return True
    for id in id_list:
        found = False
        for object in objects:
            if id == object['objectId']:
                found = True
        if not found:
            return True
    
    applications = action.get('applications', { })
    
    objects = applications.get('application', [ ])
    if not isinstance(objects, list):
        objects = [ objects ]
    id_list = idlists.get('applications', [ ])
    
    if len(id_list) != len(objects):
        return True
    for id in id_list:
        found = False
        for object in objects:
            if id == object['objectId']:
                found = True
        if not found:
            return True
            
    objects = applications.get('applicationGroup', [ ])
    if not isinstance(objects, list):
        objects = [ objects ]
    id_list = idlists.get('applicationgroups', [ ])
    
    if len(id_list) != len(objects):
        return True
    for id in id_list:
        found = False
        for object in objects:
            if id == object['objectId']:
                found = True
        if not found:
            return True
            
    return False

def update_fw_rule(stub, policy, order, properties, idlists):
    actionCategories = policy.get('actionsByCategory', None)
    if actionCategories == None:
        policy['actionsByCategory'] = [ ]
    elif not isinstance(actionCategories, list):
        policy['actionsByCategory'] = [ actionCategories ]
    actionCategories = policy['actionsByCategory']

    firewallCategory = None
    for actionCategory in actionCategories:
        if actionCategory['category'] == 'firewall':
            firewallCategory = actionCategory
    if firewallCategory == None:
        firewallCategory = { 'category': 'firewall', 'action': [ ] }
        policy['actionsByCategory'].append(firewallCategory)
 
    actions = firewallCategory.get('action', None)
    if actions == None:
        firewallCategory['action'] = [ ]
    if not isinstance(actions, list):
        firewallCategory['action'] = [ actions ]
    actions = firewallCategory['action']
 
    if order < 0 or order > len(actions):
        action = { '@class': 'firewallSecurityAction', 'category': 'firewall' }
        actions.append(action)
    else:
        action = actions[order - 1]        
    
    action['secondarySecurityGroup'] = [ ]
    
    # Action secondarySecurityGroups
    for id in idlists.get('securitygroups', [ ]):
        action['secondarySecurityGroup'].append({ 'objectId': id })  
    
    countA = len(idlists.get('applications', [ ]))
    countB = len(idlists.get('applicationgroups', [ ]))
    if countA > 0 or countB > 0:
        action['applications'] = { 'application': [ ], 'applicationGroup': [ ] }
 
        # Action applications/application
        for id in idlists.get('applications', [ ]):
            action['applications']['application'].append({ 'objectId': id })
 
        # Action applications/applicationGroups
        for id in idlists.get('applicationgroups', [ ]):
            action['applications']['applicationGroup'].append({ 'objectId': id })
    else:
        try: 
            del action['applications']
        except KeyError:
            pass
     
    # Action 'properties'
    for k,v in properties.iteritems():
        if v != None:
            action[k] = v    

    return

def delete_fw_rule(stub, policy, order): 
    actions = None   
    actionCategories = policy.get('actionsByCategory', [ ])
    if not isinstance(actionCategories, list):
        actionCategories = [ actionCategories ]
    for actionCategory in actionCategories:
        if actionCategory['category'] == 'firewall':
            actions = actionCategory.get('action', [ ])
            if not isinstance(actions, list):
                actions = [ actions ]
            
    if -1 < order < len(actions):
        actions.pop(order - 1)
        return True   
    return False

def main():
    module = AnsibleModule(
        argument_spec = dict(
            vsm_hostname = dict(type='str', required=True),
            vsm_username = dict(type='str', required=True),
            vsm_password = dict(type='str', required=True),
            scopeid = dict(type='str', required=False, default='globalroot-0'),
            secpolicy = dict(type='str', required=True),
            order = dict(type='int', required=True),
            name = dict(type='str', required=False, default=None),
            comment = dict(type='str', required=False, default=None),
            enabled = dict(type='bool', required=False, default=True),
            action = dict(type='str', 
                required=True, 
                choices=['allow', 'block', 'reject']),
            direction = dict(type='str', 
                required=True, 
                choices=['inbound', 'outbound', 'intra']),
            logged = dict(type='bool', required=False, default=False),
            groups = dict(type='list', required=False, default=[]),
            services = dict(type='list', required=False, default=[]),
            svcgroups = dict(type='list', required=False, default=[]),
            state = dict(type='str', 
                required=False, 
                choices=['present', 'absent'], 
                default='present'),
        ),
        supports_check_mode = True,
    )

    stub = NsxServiceStub(
        module, 
        hostname=module.params['vsm_hostname'],
        username=module.params['vsm_username'],
        password=module.params['vsm_password'],
        scopeid=module.params['scopeid'],
    )

    properties = {
        "name": module.params['name'],
        "description": module.params['comment'],
        "isEnabled": module.params['enabled'],
        "action": module.params['action'],
        "direction": module.params['direction'],
        "logged": module.params['logged'],
    }
    
    order = module.params.get('order', -1)
    policy = stub.lookup('Policy', 'name', module.params['secpolicy'])
    idlists = { }

    idlists['securitygroups']   = lookup_object_ids(
                                    stub, 
                                    'SecurityGroup', 
                                    module.params.get('groups', [ ]))
    idlists['applications']     = lookup_object_ids(
                                    stub, 
                                    'Application', 
                                    module.params.get('services', [ ]))
    idlists['applicationgroups'] = lookup_object_ids(
                                    stub, 
                                    'ApplicationGroup', 
                                    module.params.get('svcgroups', [ ]))

    changed = False 
    if module.params['state'] == 'absent':
        if policy:
            changed = delete_fw_rule(stub, policy, order)
            if changed and not module.check_mode:
                stub.update(policy, { })
    if module.params['state'] == 'present':
        if not policy:
            module.fail_json(msg="requested security policy '%s' does not exist" %
                module.params['secpolicy'])
        changed = compare_fw_rule(stub, policy, order, properties, idlists)
  
        if changed and not module.check_mode:
            update_fw_rule(stub, policy, order, properties, idlists)
            stub.update(policy, { })
    
    objectId = policy['objectId']
    result = dict(changed=changed, objectId=objectId)
    module.exit_json(**result)

from ansible.module_utils.basic import *
main()